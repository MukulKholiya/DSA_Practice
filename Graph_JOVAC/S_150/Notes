In adjacency matrix , there is loss of space complexity for holding non neighbour vertices i.e (i,j)=0
In adjacency list searching of connection between two vertices takes O(n) time  complexity.
To overcome both problems, we came up with HashMap as a solution.
Hashmap<Integer,Hashmap<Integer,Integer>> our structure for Graph.
Complete Graph : Every vertex connected with each and every vertex. Total vertices = n(n-1)/2 .

5 important steps for graphs:-

1.) remove
2.) ignore
3.) mark visited
4.) self work
5.) add visited

BFT (Breadth First Traversal) algorithm used to traverse the graph,
helps in finding connected component, count of components etc.
(BFS , DFS , BFT ) all have same complexity O(V+E).

DSU was good but the complexity for find and union was log(n), we need to optimize it by using PATH COMPRESSION.
(refer cp algorithm)

Single source shortest path algorithm:
1. BellmanFord Algorithm
2. Dijkstra Algorithm


Topological sorting is not real sorting , it is for directed cyclic graph for detecting cycles.